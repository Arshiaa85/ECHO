# Generated by Django 5.2.4 on 2025-08-02 11:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='HealthReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('symptoms_description', models.TextField()),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('probable_conditions', models.JSONField(default=list)),
                ('severity_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='LOW', max_length=20)),
                ('recommendations', models.JSONField(default=list)),
                ('suggested_treatments', models.JSONField(default=list)),
                ('suggested_medications', models.JSONField(default=list)),
                ('lifestyle_recommendations', models.JSONField(default=list)),
                ('risk_factors', models.JSONField(default=list)),
                ('risk_score', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_notes', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('COMPLETED', 'Completed'), ('REVIEWED', 'Reviewed by Doctor'), ('ARCHIVED', 'Archived')], default='DRAFT', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Health Report',
                'verbose_name_plural': 'Health Reports',
                'db_table': 'health_reports',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=10)),
                ('address', models.TextField(blank=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('password_reset_token', models.UUIDField(blank=True, editable=False, null=True)),
                ('password_reset_expires', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('appointment_type', models.CharField(choices=[('CONSULTATION', 'Consultation'), ('FOLLOW_UP', 'Follow-up'), ('EMERGENCY', 'Emergency'), ('ROUTINE', 'Routine Check-up'), ('SPECIALIST', 'Specialist Visit'), ('LAB_TEST', 'Lab Test'), ('IMAGING', 'Imaging'), ('OTHER', 'Other')], max_length=50)),
                ('scheduled_date', models.DateTimeField()),
                ('duration', models.IntegerField(default=30)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('healthcare_provider', models.CharField(max_length=200)),
                ('doctor_name', models.CharField(blank=True, max_length=200)),
                ('location', models.CharField(blank=True, max_length=500)),
                ('address', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled'), ('COMPLETED', 'Completed'), ('NO_SHOW', 'No Show'), ('RESCHEDULED', 'Rescheduled')], default='SCHEDULED', max_length=20)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('reminder_date', models.DateTimeField(blank=True, null=True)),
                ('patient_notes', models.TextField(blank=True)),
                ('doctor_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('related_health_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='core.healthreport')),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
                'db_table': 'appointments',
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('APPOINTMENT', 'Appointment'), ('REPORT', 'Health Report'), ('MEDICATION', 'Medication Reminder'), ('SYSTEM', 'System'), ('SECURITY', 'Security'), ('OTHER', 'Other')], max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('is_important', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('related_appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.appointment')),
                ('related_health_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.healthreport')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5)),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('allergies', models.JSONField(blank=True, default=list)),
                ('chronic_conditions', models.JSONField(blank=True, default=list)),
                ('current_medications', models.JSONField(blank=True, default=list)),
                ('family_medical_history', models.JSONField(blank=True, default=list)),
                ('lifestyle_factors', models.JSONField(blank=True, default=dict)),
                ('insurance_provider', models.CharField(blank=True, max_length=100)),
                ('insurance_policy_number', models.CharField(blank=True, max_length=50)),
                ('insurance_group_number', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
                'db_table': 'patients',
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('record_type', models.CharField(choices=[('LAB_RESULT', 'Lab Result'), ('PRESCRIPTION', 'Prescription'), ('IMAGING', 'Imaging Report'), ('VACCINATION', 'Vaccination Record'), ('SURGERY', 'Surgery Report'), ('CONSULTATION', 'Consultation Note'), ('EMERGENCY', 'Emergency Report'), ('OTHER', 'Other')], max_length=50)),
                ('file', models.FileField(upload_to='medical_records/%Y/%m/%d/')),
                ('file_name', models.CharField(max_length=255)),
                ('file_size', models.BigIntegerField()),
                ('file_type', models.CharField(max_length=50)),
                ('date_of_record', models.DateField()),
                ('healthcare_provider', models.CharField(blank=True, max_length=200)),
                ('doctor_name', models.CharField(blank=True, max_length=200)),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment', models.TextField(blank=True)),
                ('medications', models.JSONField(blank=True, default=list)),
                ('notes', models.TextField(blank=True)),
                ('ai_analysis', models.JSONField(blank=True, default=dict)),
                ('is_analyzed', models.BooleanField(default=False)),
                ('is_private', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_records', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='core.patient')),
            ],
            options={
                'verbose_name': 'Medical Record',
                'verbose_name_plural': 'Medical Records',
                'db_table': 'medical_records',
                'ordering': ['-date_of_record'],
            },
        ),
        migrations.AddField(
            model_name='healthreport',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_reports', to='core.patient'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='core.patient'),
        ),
        migrations.CreateModel(
            name='SymptomLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('symptoms', models.JSONField(default=list)),
                ('severity_level', models.CharField(choices=[('MILD', 'Mild'), ('MODERATE', 'Moderate'), ('SEVERE', 'Severe'), ('CRITICAL', 'Critical')], max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('medications_taken', models.JSONField(default=list)),
                ('activities', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='symptom_logs', to='core.patient')),
            ],
            options={
                'verbose_name': 'Symptom Log',
                'verbose_name_plural': 'Symptom Logs',
                'db_table': 'symptom_logs',
                'ordering': ['-date'],
                'unique_together': {('patient', 'date')},
            },
        ),
    ]
